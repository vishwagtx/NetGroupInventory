name: .NET CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - master
  pull_request:
    branches:
      - main
      - develop
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Choose an environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
      deploy_version:
        description: 'Deployment Version'
        required: false
        default: 'latest'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      sonarqube_token: 7d3dd14084991553da3295bddca50b258530e524
      project_key: bitmatrix_core
      organization: bitmatrix

    strategy:
      matrix:
        dotnet-version: [6.0.x]  # Change based on your .NET version

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4  # Updated to v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4  # Updated to v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Restore Dependencies
        run: dotnet restore NetGroupInventory.sln

      # Install SonarScanner for .NET
      - name: Install SonarScanner for .NET
        run: |
          dotnet tool install --global dotnet-sonarscanner
          export PATH="$PATH:/root/.dotnet/tools"  

      - name: Begin Sonar Analysis
        run: |
          dotnet sonarscanner begin /k:$project_key /o:$organization  /d:sonar.token=$sonarqube_token /d:sonar.host.url="https://sonarcloud.io" /d:sonar.qualitygate.wait=true  /d:sonar.report.export.path=sonar-report.json  # Export summary
        continue-on-error: true
          
      - name: Build Project
        run: dotnet build NetGroupInventory.sln --configuration Release --no-restore

      - name: Run unit tests
        run: dotnet test --configuration Release --no-build --logger "trx;LogFileName=test-results.trx"
      
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        with:
          name: .NET Unit Tests
          path: '**/*.trx' # Path to test results
          reporter: dotnet-trx
          
      - name: End Sonar Analysis
        run: dotnet sonarscanner end /d:sonar.token=$sonarqube_token
        continue-on-error: true
        
      # Get Quality Gate Status via SonarQube API
      - name: Get and Publish Quality Gate Status
        id: qualitygate
        run: |
          # Call the SonarQube API to get the project quality gate status
          response=$(curl -s -u "$sonarqube_token:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$project_key")
          echo "$response" > qualitygate.json
          # Extract the status using jq (make sure jq is available, or install it if needed)
          status=$(echo "$response" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $status"
          # Set the output for later steps
          echo "::set-output name=status::$status"
          # Optionally, fail the job if the quality gate is not OK
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi

      - name: Upload Build Artifacts (Optional)
        uses: actions/upload-artifact@v4  # âœ… Updated to v4
        with:
          name: published-app
          path: ./publish
